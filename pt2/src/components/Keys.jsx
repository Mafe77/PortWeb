// import React, { useRef } from "react";
// import { useGLTF } from "@react-three/drei";
// import { useLoader } from "@react-three/fiber";
// import { GLTFLoader } from "three/examples/jsm/Addons.js";

// export default function Model(props) {
//   const model = useLoader(GLTFLoader, "./Keychain1v2.glb");

//   return (
//     <>
//       <primitive
//         castShadow
//         recieveShadow
//         object={model.scene}
//         {...props}
//         onPointerEnter={(e) => console.log("enter")}
//       />
//     </>
//   );
// }

// import { useRef, useEffect } from "react";
// import { useFrame } from "@react-three/fiber";
// import { useGLTF } from "@react-three/drei";
// import { Group } from "three";
// import gsap from "gsap";

// export default function AnimatedKeychain(props) {
//   const modelRef = useRef();
//   const { scene } = useGLTF("./Keychain1v2.glb");

//   useEffect(() => {
//     const model = scene.clone();
//     model.position.set(0, -7.5, 0);
//     modelRef.current.add(model);

//     const boardKey = model.getObjectByName("Kboard");
//     const eightBall = model.getObjectByName("EightBall");
//     const goKey = model.getObjectByName("GoKey");
//     const hotelKey = model.getObjectByName("PTkey");

//     if (!boardKey || !eightBall || !goKey || !hotelKey) {
//       console.warn("Missing one or more keys in GLTF model.");
//       return;
//     }

//     const tl = gsap.timeline({
//       repeat: -1,
//       yoyo: true,
//       defaults: { duration: 2, ease: "back.Out" },
//     });

//     tl.to(boardKey.rotation, { z: -0.003 }, 0);
//     tl.to(goKey.rotation, { y: 0.03 }, 0);
//     tl.to(eightBall.rotation, { z: 0.1 }, 0);
//     tl.to(hotelKey.rotation, { z: 0.3 }, 0);
//   }, [scene]);

//   return <group ref={modelRef} {...props} />;
// }

/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef, useState, useEffect } from "react";
import { useFrame } from "@react-three/fiber";
import { useGLTF, Html } from "@react-three/drei";
import * as THREE from "three";

// export default function Model(props) {
//   const boardKeyRef = useRef();
//   const goKeyRef = useRef();
//   const eightBallRef = useRef();
//   const hotelKeyRef = useRef();

//   const [showTitle, setShowTitle] = useState(false);
//   const [pos, setPos] = useState({ x: 0, y: 0 });

//   // store direction for yoyo effect
//   const direction = useRef(1);

//   useFrame((state, delta) => {
//     // simple oscillation
//     const speed = 0.5; // adjust for slower/faster movement
//     const amount = Math.sin(state.clock.elapsedTime * speed) * 1; // -0.5 to 0.5 range

//     if (boardKeyRef.current) boardKeyRef.current.rotation.z = amount * 0.2;
//     if (goKeyRef.current) goKeyRef.current.rotation.y = amount * 0.3;
//     if (eightBallRef.current) eightBallRef.current.rotation.z = amount * 0.05;
//     if (hotelKeyRef.current) hotelKeyRef.current.rotation.z = amount * 0.3;
//   });
//   const { nodes, materials } = useGLTF("/Keychain1.glb");

//   return (
//     <>
//       <group {...props} dispose={null}>
//         <group name="Scene">
//           <group
//             name="GoKey"
//             position={[-0.575, 8.451, -0.061]}
//             rotation={[-3.109, 0.389, -2.949]}
//             scale={0.833}
//             ref={goKeyRef}
//             onPointerEnter={() => {
//               setShowTitle(true);
//             }}
//             onPointerLeave={() => setShowTitle(false)}
//             onPointerMove={(e) => {
//               e.stopPropagation();
//               setPos({ x: e.clientX - 650, y: e.clientY - 560 }); // offset so div doesn't cover cursor
//             }}
//           >
//             <mesh
//               name="Sphere001"
//               geometry={nodes.Sphere001.geometry}
//               material={materials.GoBlack}
//             />
//             <mesh
//               name="Sphere001_1"
//               geometry={nodes.Sphere001_1.geometry}
//               material={materials["マテリアル.001"]}
//             />
//             <mesh
//               name="Sphere001_2"
//               geometry={nodes.Sphere001_2.geometry}
//               material={materials.GoWhite}
//             />

//             {showTitle && (
//               <Html>
//                 <div
//                   style={{
//                     position: "fixed",
//                     top: pos.y,
//                     left: pos.x,
//                     background: "rgba(0,0,0,0.8)",
//                     color: "white",
//                     padding: "5px 10px",
//                     borderRadius: 4,
//                     pointerEvents: "none",
//                     userSelect: "none",
//                     whiteSpace: "nowrap",
//                     transform: "translate(0, 0)",
//                   }}
//                 >
//                   My Mesh Title
//                 </div>
//               </Html>
//             )}
//           </group>
//           <group
//             name="Kboard"
//             position={[-1.117, 8.76, 0.136]}
//             rotation={[1.241, -0.384, 0.327]}
//             scale={[0.806, 0.46, 0.806]}
//             ref={boardKeyRef}
//           >
//             <mesh
//               name="Cube005"
//               geometry={nodes.Cube005.geometry}
//               material={
//                 new THREE.MeshBasicMaterial({
//                   color: "gray",
//                   transparent: true,
//                   opacity: 0.5,
//                 })
//               }
//             />
//             <mesh
//               name="Cube005_1"
//               geometry={nodes.Cube005_1.geometry}
//               material={materials["マテリアル.001"]}
//             />
//             <mesh
//               name="Cube005_2"
//               geometry={nodes.Cube005_2.geometry}
//               material={materials.Material}
//             />
//             <mesh
//               name="Cube005_3"
//               geometry={nodes.Cube005_3.geometry}
//               material={new THREE.MeshStandardMaterial({ color: "#6E88B3" })}
//             />
//           </group>
//           <group
//             name="EightBall"
//             position={[0.181, 8.454, 0.155]}
//             rotation={[-0.052, 0.181, 0.151]}
//             scale={1.379}
//             ref={eightBallRef}
//           >
//             <mesh
//               name="Roundcube001"
//               geometry={nodes.Roundcube001.geometry}
//               material={materials["Black-8Ball"]}
//             />
//             <mesh
//               name="Roundcube001_1"
//               geometry={nodes.Roundcube001_1.geometry}
//               material={materials["8Ball"]}
//             />
//             <mesh
//               name="Roundcube001_2"
//               geometry={nodes.Roundcube001_2.geometry}
//               material={materials["マテリアル.001"]}
//             />
//           </group>
//           <mesh
//             name="ring"
//             geometry={nodes.ring.geometry}
//             material={materials["マテリアル.001"]}
//             position={[-0.213, 9.416, 0.189]}
//             rotation={[-1.595, 0, -2.927]}
//             scale={0.511}
//           />
//           <group
//             name="PTkey"
//             position={[0.608, 8.944, 0.163]}
//             rotation={[1.678, 0.428, -0.006]}
//             scale={1.126}
//             ref={hotelKeyRef}
//           >
//             <mesh
//               name="Plane001"
//               geometry={nodes.Plane001.geometry}
//               material={materials.HotelWhite}
//             />
//             <mesh
//               name="Plane001_1"
//               geometry={nodes.Plane001_1.geometry}
//               material={materials["Black-Text"]}
//             />
//             <mesh
//               name="Plane001_2"
//               geometry={nodes.Plane001_2.geometry}
//               material={materials["マテリアル.001"]}
//             />
//           </group>
//           <mesh
//             name="Clasp"
//             geometry={nodes.Clasp.geometry}
//             material={materials["マテリアル.001"]}
//             position={[-0.264, 12.892, 0.149]}
//             rotation={[0.003, -0.02, 3.141]}
//             scale={5.247}
//           />
//         </group>
//       </group>
//     </>
//   );
// }

export default function Model(props) {
  const boardKeyRef = useRef();
  const goKeyRef = useRef();
  const eightBallRef = useRef();
  const hotelKeyRef = useRef();

  const [hoveredKey, setHoveredKey] = useState(null);
  const [showTitle, setShowTitle] = useState(false);
  const [pos, setPos] = useState({ x: 0, y: 0 });

  useFrame((state) => {
    const amount = Math.sin(state.clock.elapsedTime * 0.5); // oscillation for rotation

    // Rotations (same as before)
    if (boardKeyRef.current) boardKeyRef.current.rotation.y = -0.6;
    if (boardKeyRef.current) boardKeyRef.current.rotation.z = amount * 0.2;
    // if (boardKeyRef.current) boardKeyRef.current.rotation.x = 0.5;
    if (goKeyRef.current && hoveredKey != "eightBall")
      goKeyRef.current.rotation.y = amount * 0.3;
    // need to change both for go key
    if (goKeyRef.current) goKeyRef.current.rotation.z = -2.7;
    // if (goKeyRef.current) goKeyRef.current.rotation.x = amount * 0.4;
    if (eightBallRef.current) eightBallRef.current.rotation.z = amount * 0.07;
    if (hotelKeyRef.current) hotelKeyRef.current.rotation.z = amount * 0.3;
    // if (hotelKeyRef.current) hotelKeyRef.current.rotation.y = 0.5;

    // Hover movement effect
    const moveSpeed = 0.05; // how quickly keys move toward target position
    const offsets = {
      boardKey: 0.6,
      goKey: -2.3,
      eightBall: 0,
      hotelKey: 0,
    };

    if (hoveredKey === "goKey") {
      // offsets.goKey = -0.3; // move hovered left
      offsets.boardKey = -4; // neighbor right
      offsets.eightBall = 6; // neighbor right
      offsets.hotelKey = 0.5;
    } else if (hoveredKey === "boardKey") {
      // offsets.boardKey = 4;
      offsets.goKey = -9;
      offsets.eightBall = 6;
      offsets.hotelKey = 0.5;
    } else if (hoveredKey === "eightBall") {
      // offsets.eightBall = -0.3;
      offsets.goKey = 5;
      offsets.boardKey = -10;
      offsets.hotelKey = 0.5;
    } else if (hoveredKey === "hotelKey") {
      // offsets.hotelKey = -0.3;
      offsets.eightBall = -4;
      offsets.goKey = 5;
      offsets.boardKey = -8;
    }

    // Smoothly move each key toward target offset
    if (boardKeyRef.current) {
      boardKeyRef.current.rotation.y +=
        (offsets.boardKey -
          boardKeyRef.current.rotation.y +
          boardKeyRef.current.userData.baseX) *
        moveSpeed;
    }
    if (goKeyRef.current) {
      goKeyRef.current.rotation.z +=
        (offsets.goKey -
          goKeyRef.current.rotation.z +
          goKeyRef.current.userData.baseX) *
        moveSpeed;
    }
    if (eightBallRef.current) {
      eightBallRef.current.rotation.z +=
        (offsets.eightBall -
          eightBallRef.current.rotation.z +
          eightBallRef.current.userData.baseX) *
        moveSpeed;
    }
    if (hotelKeyRef.current) {
      hotelKeyRef.current.rotation.y +=
        (offsets.hotelKey -
          hotelKeyRef.current.rotation.y +
          hotelKeyRef.current.userData.baseX) *
        moveSpeed;
    }
  });

  const { nodes, materials } = useGLTF("/Keychain1.glb");

  // Store base positions when model mounts
  useEffect(() => {
    if (boardKeyRef.current)
      boardKeyRef.current.userData.baseX = boardKeyRef.current.rotation.y;
    if (goKeyRef.current)
      goKeyRef.current.userData.baseX = goKeyRef.current.rotation.z;
    if (eightBallRef.current)
      eightBallRef.current.userData.baseX = eightBallRef.current.rotation.z;
    if (hotelKeyRef.current)
      hotelKeyRef.current.userData.baseX = hotelKeyRef.current.rotation.y;
  }, []);

  return (
    <>
      <group {...props} dispose={null}>
        <group name="Scene">
          {/* Go Key */}
          <group
            name="GoKey"
            position={[-0.575, 8.451, -0.061]}
            rotation={[-3.109, 0.389, -2.949]}
            scale={0.833}
            ref={goKeyRef}
            onPointerEnter={() => {
              setHoveredKey("goKey");
              setShowTitle(true);
            }}
            onPointerLeave={() => {
              setHoveredKey(null);
              setShowTitle(false);
            }}
            onPointerMove={(e) => {
              e.stopPropagation();
              setPos({ x: e.clientX - 650, y: e.clientY - 560 });
            }}
          >
            <mesh
              geometry={nodes.Sphere001.geometry}
              material={materials.GoBlack}
            />
            <mesh
              geometry={nodes.Sphere001_1.geometry}
              material={materials["マテリアル.001"]}
            />
            <mesh
              geometry={nodes.Sphere001_2.geometry}
              material={materials.GoWhite}
            />
          </group>

          {/* Board Key */}
          <group
            name="Kboard"
            position={[-1.117, 8.76, 0.136]}
            rotation={[1.241, -0.384, 0.327]}
            scale={[0.806, 0.46, 0.806]}
            ref={boardKeyRef}
            onPointerEnter={() => {
              setHoveredKey("boardKey");
              setShowTitle(true);
            }}
            onPointerLeave={() => {
              setHoveredKey(null);
              setShowTitle(false);
            }}
            onPointerMove={(e) => {
              e.stopPropagation();
              setPos({ x: e.clientX - 650, y: e.clientY - 560 });
            }}
          >
            {/* Mesh parts */}
            <mesh
              geometry={nodes.Cube005.geometry}
              material={materials.Material}
            />
            <mesh
              geometry={nodes.Cube005_1.geometry}
              material={materials["マテリアル.001"]}
            />
            <mesh
              geometry={nodes.Cube005_2.geometry}
              material={materials.Material}
            />
            <mesh
              geometry={nodes.Cube005_3.geometry}
              material={new THREE.MeshStandardMaterial({ color: "#6E88B3" })}
            />
          </group>

          {/* Eight Ball */}
          <group
            name="EightBall"
            position={[0.181, 8.454, 0.155]}
            rotation={[-0.052, 0.181, 0.151]}
            scale={1.379}
            ref={eightBallRef}
            onPointerEnter={() => {
              setHoveredKey("eightBall");
              setShowTitle(true);
            }}
            onPointerLeave={() => {
              setHoveredKey(null);
              setShowTitle(false);
            }}
            onPointerMove={(e) => {
              e.stopPropagation();
              setPos({ x: e.clientX - 650, y: e.clientY - 560 });
            }}
          >
            <mesh
              geometry={nodes.Roundcube001.geometry}
              material={materials["Black-8Ball"]}
            />
            <mesh
              geometry={nodes.Roundcube001_1.geometry}
              material={materials["8Ball"]}
            />
            <mesh
              geometry={nodes.Roundcube001_2.geometry}
              material={materials["マテリアル.001"]}
            />
          </group>

          {/* Hotel Key */}
          <group
            name="PTkey"
            position={[0.608, 8.944, 0.163]}
            rotation={[1.678, 0.428, -0.006]}
            scale={1.126}
            ref={hotelKeyRef}
            onPointerEnter={() => {
              setHoveredKey("hotelKey");
              setShowTitle(true);
            }}
            onPointerLeave={() => {
              setHoveredKey(null);
              setShowTitle(false);
            }}
            onPointerMove={(e) => {
              e.stopPropagation();
              setPos({ x: e.clientX - 650, y: e.clientY - 560 });
            }}
          >
            <mesh
              geometry={nodes.Plane001.geometry}
              material={materials.HotelWhite}
            />
            <mesh
              geometry={nodes.Plane001_1.geometry}
              material={materials["Black-Text"]}
            />
            <mesh
              geometry={nodes.Plane001_2.geometry}
              material={materials["マテリアル.001"]}
            />
          </group>

          {/* Clasp */}
          <mesh
            name="Clasp"
            geometry={nodes.Clasp.geometry}
            material={materials["マテリアル.001"]}
            position={[-0.264, 12.892, 0.149]}
            rotation={[0.003, -0.02, 3.141]}
            scale={5.247}
          />

          {/* Key Ring */}
          <mesh
            name="ring"
            geometry={nodes.ring.geometry}
            material={materials["マテリアル.001"]}
            position={[-0.213, 9.416, 0.189]}
            rotation={[-1.595, 0, -2.927]}
            scale={0.511}
          />
        </group>
      </group>

      {showTitle && (
        <Html>
          <div
            style={{
              position: "fixed",
              top: pos.y,
              left: pos.x,
              background: "rgba(255,255,255,1)",
              color: "black",
              padding: "5px 10px",
              borderRadius: 4,
              pointerEvents: "none",
              whiteSpace: "nowrap",
            }}
          >
            {hoveredKey}
          </div>
        </Html>
      )}
    </>
  );
}

useGLTF.preload("/Keychain1.glb");
